name: Release 

on: 
  push: 
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]


jobs: 
  linter: 
    name: linter
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pipenv wheel
        pipenv install --dev
    - name: Analysing the code with pylint
      run: |
        pipenv run pylint src
  tests: 
    name: tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pipenv wheel
        pipenv install --dev
    - name: Analysing the code with pylint
      run: |
        pipenv run test
  deploy:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [linter, tests]
    steps: 
      - uses: actions/checkout@v2
      - name: parse version from tag
        run: | 
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Login to registry
        run: echo "${{secrets.GITHUB_TOKEN}}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Build and push
        # IMG=docker.willekens.dev/${{ github.repository }}
        run: | 
          IMG=ghcr.io/${{ github.repository }}
          docker build \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG
  restart-kubernetes:
    name: restart kubernetes deployment
    runs-on: ubuntu-20.04
    needs: [deploy]
    steps:
      - name: Extract tag
        run: |
          TAG=${GITHUB_REF:10}
          echo "tag=$TAG" >> $GITHUB_ENV
      - name: Run ssh commands
        uses: appleboy/ssh-action@master
        env:
          TAG: ${{ env.tag }}
        with:
          host: ${{ secrets.HOST }}
          script_stop: false
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: TAG
          script: |
            git clone https://github.com/smelly-python/so-tags.git so-tags-tmp
            cd so-tags-tmp
            git checkout $TAG
            cd ../
            kubectl apply -f ./so-tags-tmp/kubernetes/deployment.yml
            rm -rf so-tags-tmp
            kubectl rollout restart deployment/so-tags-deployment

